/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const fs = require("fs").promises;
const { v4: uuidv4 } = require("uuid");

const app = express();
app.use(express.json());

app.get("/todos", async (req, res) => {
  const data = await fs.readFile("todos.json", "utf-8");
  if (data === "") {
    return res.status(200).json([]);
  }
  let todos;
  try {
    todos = JSON.parse(data);
  } catch (err) {
    return res.status(500).send("Internal Server Error");
  }

  res.status(200).json(todos);
});

app.get("/todos/:id", async (req, res) => {
  const todoId = req.params.id;
  let todos;
  try {
    const data = await fs.readFile("todos.json", "utf-8");
    if (data === "") {
      res.status(404).send("Not found");
    }
    todos = JSON.parse(data);
  } catch (err) {
    return res.status(500).send("Internal Server Error");
  }

  for (const todo of todos) {
    if (todo.id === todoId) {
      return res.status(200).json(todo);
    }
  }

  res.status(404).send("Not found");
});

app.post("/todos", async (req, res) => {
  const newTodo = req.body;
  const newUuid = uuidv4();
  newTodo["id"] = newUuid;
  try {
    const data = await fs.readFile("todos.json", "utf-8");
    const todos = data === "" ? [] : JSON.parse(data);
    todos.push(newTodo);
    await fs.writeFile("todos.json", JSON.stringify(todos));
    return res.status(201).json({ id: newUuid });
  } catch (err) {
    console.log(err);
    return res.status(500).send("Internal Server Error");
  }
});

app.delete("/todos/:id", async (req, res) => {
  const todoId = req.params.id;
  let data;
  let todos;
  try {
    data = await fs.readFile("todos.json", "utf-8");
    if (data === "") {
      res.status(404).send("Not found");
    }
    todos = JSON.parse(data);
  } catch (err) {
    console.log(err);
    return res.status(500).json({ error: err });
  }

  const newTodos = todos.filter((todo) => {
    return todo.id !== todoId;
  });

  if (newTodos.length === todos.length) {
    return res.status(404).send("Not found");
  }

  try {
    await fs.writeFile("todos.json", JSON.stringify(newTodos));
    return res.status(200).send();
  } catch {
    console.error("Error occured - ", err);
    return res
      .status(500)
      .json({ error: "Error occurred while deleting todo" });
  }
});

app.put("/todos/:id", async (req, res) => {
  const todoId = req.params.id;
  const newTodo = req.body;
  newTodo["id"] = todoId;
  try {
    const data = await fs.readFile("todos.json", "utf-8");
    const todos = data === "" ? [] : JSON.parse(data);
    console.log(todos);

    for (let i in todos) {
      console.log(todos[i]);
      if (todos[i].id === todoId) {
        todos[i] = newTodo;
        await fs.writeFile("todos.json", JSON.stringify(todos));
        return res.status(200).send();
      }
    }

    return res.status(404).send("Not found");
  } catch (err) {
    console.log(err);
    res.status(500).send("Internal Server error");
  }
});

app.listen(3001);

module.exports = app;
